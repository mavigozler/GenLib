type GulpCallback = () => void;

type AllowableStages = "test" | "release";
const allowableStagesValues: AllowableStages[] = [ "test", "release" ];

type HTMLdef = {
	templateTransform: {from: string; to: string}[];
	subfolderPaths?: { [key: string]: string };
	links?: (Record<string, string> | string)[];
	scripts?: {
		special: (Record<string, string> | string)[];
		module: {
			tsconfigPathMaps: {default: string;} | {from:string;to:string}[];
			// (Record<string, string> | string)[];
		}
	} ;
	replace?: { fromPattern: string; toText: string }[];
	add?: { insertionPoint: string; insertionText: string }[];
	del?: string[];
};

interface GulpfileConfigStage {
	base: {
		projectRoot: string;
		browserLoadPage: string;
	};
	preclean: string[];
	tsconfig: {
		path: string;
		filesList: string[];
	};
	copy: {  // multiple file copy to single target dir
		js: {[key: string]: string | string[];} // compiled or native
		css: {[key: string]: string | string[];}
		img: {[key: string]: string | string[];}
		copyList?: {from: string[]; to: string;}[];
	};
	moveRename: [ string, string ][];
	edits: {   // use regular expressions
		filepath: string;
		fixes: {target: string; replace: string;}[];
	}[];
	package: string[];
	html: HTMLdef | null;
	webpack?: {
		entryJS: string;
		dest: string;
	}
	cleanup: {
		path: string;
		filter: string;
		recursive: boolean;
		preview: boolean;
	}[];
	flags: string[];
}

type ConfigStage = {
	stageName: AllowableStages;
	info: GulpfileConfigStage;
};

// This is the format of the actual file
type ConfigJson = {
	configNames: string[];
	base: {
		projectRoot: string;
		browserLoadPage: string;
	};
	outputReportPath?: string | undefined;
} & {
	[key: string]: Record<AllowableStages, GulpfileConfigStage>;
}

// This is the memory structure organization of Gulpfile.config.json in code
interface GulpfileConfigs {
	configNames: string[];
	outputReportPath: string | undefined;
	configs: {
		configName: string;
		stages: ConfigStage[];
	}[];
}